{
	"info": {
		"_postman_id": "fc2995c7-c31c-4bf5-ad87-72a36e383a07",
		"name": "toolshop",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45902521"
	},
	"item": [
		{
			"name": "POST /users/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Login - Valid response code\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 401]);\r",
							"});\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    pm.test(\"Login - Success\", function () {\r",
							"        pm.expect(jsonData).to.have.property(\"access_token\");\r",
							"        pm.expect(jsonData.access_token).to.be.a(\"string\").and.not.empty;\r",
							"    });\r",
							"    pm.collectionVariables.set(\"auth_token\", jsonData.access_token);\r",
							"} else if (pm.response.code === 401) {\r",
							"    pm.test(\"Login - Unauthorized\", function () {\r",
							"        pm.expect(jsonData).to.have.property(\"error\");\r",
							"        pm.expect(jsonData.error).to.match(/unauthorized/i);\r",
							"    });\r",
							"    pm.collectionVariables.set(\"auth_token\", \"\");\r",
							"} else {\r",
							"    pm.test(\"Login - Unexpected error\", function () {\r",
							"        pm.expect.fail(\"Unexpected status: \" + pm.response.code + \" - \" + pm.response.text());\r",
							"    });\r",
							"    pm.collectionVariables.set(\"auth_token\", \"\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /users/change-password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const testName = pm.iterationData.get(\"test_name\");\r",
							"const expectedCode = parseInt(pm.iterationData.get(\"expected_code\"), 10);\r",
							"const actualCode = pm.response.code;\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"console.log(\"=== TEST CONTEXT ===\");\r",
							"console.log(\"Test Name:\", testName);\r",
							"console.log(\"Email:\", pm.iterationData.get(\"email\"));\r",
							"console.log(\"Current Password:\", \r",
							"    pm.iterationData.get(\"current_password\") || \r",
							"    \"empty\"\r",
							");\r",
							"console.log(\"New Password:\", \r",
							"    pm.iterationData.get(\"new_password\") || \r",
							"    \"empty\"\r",
							");\r",
							"console.log(\"Expected Code:\", expectedCode);\r",
							"console.log(\"Actual Code:\", actualCode);\r",
							"console.log(\"Response Body:\", JSON.stringify(jsonData, null, 2));\r",
							"console.log(\"====================\");\r",
							"\r",
							"pm.test(`Status code is ${expectedCode}`, function () {\r",
							"    pm.expect(actualCode, `Expected ${expectedCode} but got ${actualCode}`).to.eql(expectedCode);\r",
							"});\r",
							"\r",
							"if (expectedCode === 200) {\r",
							"    pm.test(\"Password change successful\", function () {\r",
							"        pm.expect(jsonData).to.have.property(\"success\", true);\r",
							"    });\r",
							"} else if (expectedCode === 400 || expectedCode === 401) {\r",
							"    pm.test(\"Error response contains message or error\", function () {\r",
							"        pm.expect(\r",
							"            jsonData.hasOwnProperty(\"message\") || jsonData.hasOwnProperty(\"error\"),\r",
							"            \"Expected 'message' or 'error' in response\"\r",
							"        ).to.be.true;\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"current_password\": \"{{current_password}}\",\r\n  \"new_password\": \"{{new_password}}\",\r\n  \"new_password_confirmation\": \"{{new_password_confirmation}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users/change-password",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"change-password"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://api-with-bugs.practicesoftwaretesting.com",
			"type": "default"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "default"
		}
	]
}